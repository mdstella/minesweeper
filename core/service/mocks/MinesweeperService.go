// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/mdstella/minesweeper/core/model"

// MinesweeperService is an autogenerated mock type for the MinesweeperService type
type MinesweeperService struct {
	mock.Mock
}

// AddFlag provides a mock function with given fields: gameId, row, column
func (_m *MinesweeperService) AddFlag(gameId string, row int, column int) (model.GameDefintion, error) {
	ret := _m.Called(gameId, row, column)

	var r0 model.GameDefintion
	if rf, ok := ret.Get(0).(func(string, int, int) model.GameDefintion); ok {
		r0 = rf(gameId, row, column)
	} else {
		r0 = ret.Get(0).(model.GameDefintion)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(gameId, row, column)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGame provides a mock function with given fields:
func (_m *MinesweeperService) NewGame() (model.GameDefintion, error) {
	ret := _m.Called()

	var r0 model.GameDefintion
	if rf, ok := ret.Get(0).(func() model.GameDefintion); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(model.GameDefintion)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PickCell provides a mock function with given fields: gameId, row, column
func (_m *MinesweeperService) PickCell(gameId string, row int, column int) (model.GameDefintion, error) {
	ret := _m.Called(gameId, row, column)

	var r0 model.GameDefintion
	if rf, ok := ret.Get(0).(func(string, int, int) model.GameDefintion); ok {
		r0 = rf(gameId, row, column)
	} else {
		r0 = ret.Get(0).(model.GameDefintion)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(gameId, row, column)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
